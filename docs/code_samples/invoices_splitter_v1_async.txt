import com.mindee.MindeeClient;
import com.mindee.input.LocalInputSource;
import com.mindee.parsing.common.AsyncPredictResponse;
import com.mindee.parsing.common.Job;
import com.mindee.parsing.common.Document;
import com.mindee.product.invoicesplitter.InvoiceSplitterV1;
import java.io.File;
import java.io.IOException;
import java.util.Optional;

public class SimpleMindeeClient {

  public static void main(String[] args) throws IOException, InterruptedException {
    String apiKey = "my-api-key";
    String filePath = "/path/to/the/file.ext";

    // Don't try to get the document more than this many times
    final int maxRetries = 10;

    // Wait this many seconds between each try
    final int intervalSec = 6;

    // Init a new client
    MindeeClient mindeeClient = new MindeeClient(apiKey);
    LocalInputSource inputSource = new LocalInputSource(new File(filePath));

    AsyncPredictResponse<InvoiceSplitterV1> enqueueResponse = mindeeClient.enqueue(
        InvoiceSplitterV1.class,
        inputSource
    );

    String jobId = enqueueResponse.getJob().getId();

    AsyncPredictResponse<InvoiceSplitterV1> jobResponse = null;
    int retryCount = 0;

    while (retryCount < maxRetries) {
      jobResponse = mindeeClient.parseQueued(InvoiceSplitterV1.class, jobId);
      Optional<Document<InvoiceSplitterV1>> documentOptional = jobResponse.getDocument();

      if (documentOptional.isPresent()) {
        Document<InvoiceSplitterV1> document = documentOptional.get();
        System.out.println(document.toString());
        break;
      }

      retryCount++;
      Thread.sleep(intervalSec * 1000); // Wait for intervalSec seconds before retrying
    }

    if (jobResponse == null || !jobResponse.getDocument().isPresent()) {
      throw new RuntimeException("Max retries exceeded. Failed to get the document.");
    }
  }
}
